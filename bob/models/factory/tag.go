// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	models "go.bbkane.com/taggedmarks2/bob/models"
)

type TagMod interface {
	Apply(*TagTemplate)
}

type TagModFunc func(*TagTemplate)

func (f TagModFunc) Apply(n *TagTemplate) {
	f(n)
}

type TagModSlice []TagMod

func (mods TagModSlice) Apply(n *TagTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TagTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TagTemplate struct {
	ID         func() int64
	CreateTime func() string
	Name       func() string
	UpdateTime func() string
	r          tagR
	f          *factory
}

type tagR struct {
	TaggedmarkTag *tagTaggedmarkTagR
}

type tagTaggedmarkTagR struct {
	o *TaggedmarkTagTemplate
}

// Apply mods to the TagTemplate
func (o *TagTemplate) Apply(mods ...TagMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Tag
// this does nothing with the relationship templates
func (o TagTemplate) toModel() *models.Tag {
	m := &models.Tag{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CreateTime != nil {
		m.CreateTime = o.CreateTime()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.UpdateTime != nil {
		m.UpdateTime = o.UpdateTime()
	}

	return m
}

// toModels returns an models.TagSlice
// this does nothing with the relationship templates
func (o TagTemplate) toModels(number int) models.TagSlice {
	m := make(models.TagSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Tag
// according to the relationships in the template. Nothing is inserted into the db
func (t TagTemplate) setModelRels(o *models.Tag) {
	if t.r.TaggedmarkTag != nil {
		rel := t.r.TaggedmarkTag.o.toModel()
		rel.R.Tag = o
		rel.TagID = o.ID
		o.R.TaggedmarkTag = rel
	}

}

// BuildSetter returns an *models.TagSetter
// this does nothing with the relationship templates
func (o TagTemplate) BuildSetter() *models.TagSetter {
	m := &models.TagSetter{}

	if o.CreateTime != nil {
		m.CreateTime = omit.From(o.CreateTime())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.UpdateTime != nil {
		m.UpdateTime = omit.From(o.UpdateTime())
	}

	return m
}

// BuildManySetter returns an []*models.TagSetter
// this does nothing with the relationship templates
func (o TagTemplate) BuildManySetter(number int) []*models.TagSetter {
	m := make([]*models.TagSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Tag
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TagTemplate.Create
func (o TagTemplate) Build() *models.Tag {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TagSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TagTemplate.CreateMany
func (o TagTemplate) BuildMany(number int) models.TagSlice {
	m := make(models.TagSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTag(m *models.TagSetter) {
	if m.CreateTime.IsUnset() {
		m.CreateTime = omit.From(random[string](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.UpdateTime.IsUnset() {
		m.UpdateTime = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Tag
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TagTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Tag) (context.Context, error) {
	var err error

	if o.r.TaggedmarkTag != nil {
		var rel0 *models.TaggedmarkTag
		ctx, rel0, err = o.r.TaggedmarkTag.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachTaggedmarkTag(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a tag and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TagTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Tag, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a tag and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TagTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Tag, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTag(opt)

	m, err := models.TagsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = tagCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tags and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TagTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TagSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple tags and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TagTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TagSlice, error) {
	var err error
	m := make(models.TagSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Tag has methods that act as mods for the TagTemplate
var TagMods tagMods

type tagMods struct{}

func (m tagMods) RandomizeAllColumns(f *faker.Faker) TagMod {
	return TagModSlice{
		TagMods.RandomID(f),
		TagMods.RandomCreateTime(f),
		TagMods.RandomName(f),
		TagMods.RandomUpdateTime(f),
	}
}

// Set the model columns to this value
func (m tagMods) ID(val int64) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m tagMods) IDFunc(f func() int64) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m tagMods) UnsetID() TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tagMods) RandomID(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m tagMods) ensureID(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m tagMods) CreateTime(val string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.CreateTime = func() string { return val }
	})
}

// Set the Column from the function
func (m tagMods) CreateTimeFunc(f func() string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.CreateTime = f
	})
}

// Clear any values for the column
func (m tagMods) UnsetCreateTime() TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.CreateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tagMods) RandomCreateTime(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.CreateTime = func() string {
			return random[string](f)
		}
	})
}

func (m tagMods) ensureCreateTime(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		if o.CreateTime != nil {
			return
		}

		o.CreateTime = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tagMods) Name(val string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m tagMods) NameFunc(f func() string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m tagMods) UnsetName() TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tagMods) RandomName(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m tagMods) ensureName(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tagMods) UpdateTime(val string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.UpdateTime = func() string { return val }
	})
}

// Set the Column from the function
func (m tagMods) UpdateTimeFunc(f func() string) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.UpdateTime = f
	})
}

// Clear any values for the column
func (m tagMods) UnsetUpdateTime() TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.UpdateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tagMods) RandomUpdateTime(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

func (m tagMods) ensureUpdateTime(f *faker.Faker) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		if o.UpdateTime != nil {
			return
		}

		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

func (m tagMods) WithTaggedmarkTag(rel *TaggedmarkTagTemplate) TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.r.TaggedmarkTag = &tagTaggedmarkTagR{
			o: rel,
		}
	})
}

func (m tagMods) WithNewTaggedmarkTag(mods ...TaggedmarkTagMod) TagMod {
	return TagModFunc(func(o *TagTemplate) {

		related := o.f.NewTaggedmarkTag(mods...)

		m.WithTaggedmarkTag(related).Apply(o)
	})
}

func (m tagMods) WithoutTaggedmarkTag() TagMod {
	return TagModFunc(func(o *TagTemplate) {
		o.r.TaggedmarkTag = nil
	})
}
