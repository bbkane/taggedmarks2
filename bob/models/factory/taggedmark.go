// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	models "go.bbkane.com/taggedmarks2/bob/models"
)

type TaggedmarkMod interface {
	Apply(*TaggedmarkTemplate)
}

type TaggedmarkModFunc func(*TaggedmarkTemplate)

func (f TaggedmarkModFunc) Apply(n *TaggedmarkTemplate) {
	f(n)
}

type TaggedmarkModSlice []TaggedmarkMod

func (mods TaggedmarkModSlice) Apply(n *TaggedmarkTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TaggedmarkTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaggedmarkTemplate struct {
	ID         func() int64
	CreateTime func() string
	UpdateTime func() string
	URL        func() string
	r          taggedmarkR
	f          *factory
}

type taggedmarkR struct {
	TaggedmarkTags []*taggedmarkTaggedmarkTagsR
}

type taggedmarkTaggedmarkTagsR struct {
	number int
	o      *TaggedmarkTagTemplate
}

// Apply mods to the TaggedmarkTemplate
func (o *TaggedmarkTemplate) Apply(mods ...TaggedmarkMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Taggedmark
// this does nothing with the relationship templates
func (o TaggedmarkTemplate) toModel() *models.Taggedmark {
	m := &models.Taggedmark{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CreateTime != nil {
		m.CreateTime = o.CreateTime()
	}
	if o.UpdateTime != nil {
		m.UpdateTime = o.UpdateTime()
	}
	if o.URL != nil {
		m.URL = o.URL()
	}

	return m
}

// toModels returns an models.TaggedmarkSlice
// this does nothing with the relationship templates
func (o TaggedmarkTemplate) toModels(number int) models.TaggedmarkSlice {
	m := make(models.TaggedmarkSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Taggedmark
// according to the relationships in the template. Nothing is inserted into the db
func (t TaggedmarkTemplate) setModelRels(o *models.Taggedmark) {
	if t.r.TaggedmarkTags != nil {
		rel := models.TaggedmarkTagSlice{}
		for _, r := range t.r.TaggedmarkTags {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.TaggedmarkID = o.ID
				rel.R.Taggedmark = o
			}
			rel = append(rel, related...)
		}
		o.R.TaggedmarkTags = rel
	}

}

// BuildSetter returns an *models.TaggedmarkSetter
// this does nothing with the relationship templates
func (o TaggedmarkTemplate) BuildSetter() *models.TaggedmarkSetter {
	m := &models.TaggedmarkSetter{}

	if o.CreateTime != nil {
		m.CreateTime = omit.From(o.CreateTime())
	}
	if o.UpdateTime != nil {
		m.UpdateTime = omit.From(o.UpdateTime())
	}
	if o.URL != nil {
		m.URL = omit.From(o.URL())
	}

	return m
}

// BuildManySetter returns an []*models.TaggedmarkSetter
// this does nothing with the relationship templates
func (o TaggedmarkTemplate) BuildManySetter(number int) []*models.TaggedmarkSetter {
	m := make([]*models.TaggedmarkSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Taggedmark
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaggedmarkTemplate.Create
func (o TaggedmarkTemplate) Build() *models.Taggedmark {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaggedmarkSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaggedmarkTemplate.CreateMany
func (o TaggedmarkTemplate) BuildMany(number int) models.TaggedmarkSlice {
	m := make(models.TaggedmarkSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTaggedmark(m *models.TaggedmarkSetter) {
	if m.CreateTime.IsUnset() {
		m.CreateTime = omit.From(random[string](nil))
	}
	if m.UpdateTime.IsUnset() {
		m.UpdateTime = omit.From(random[string](nil))
	}
	if m.URL.IsUnset() {
		m.URL = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Taggedmark
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaggedmarkTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Taggedmark) (context.Context, error) {
	var err error

	if o.r.TaggedmarkTags != nil {
		for _, r := range o.r.TaggedmarkTags {
			var rel0 models.TaggedmarkTagSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachTaggedmarkTags(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a taggedmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaggedmarkTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Taggedmark, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a taggedmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TaggedmarkTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Taggedmark, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTaggedmark(opt)

	m, err := models.TaggedmarksTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = taggedmarkCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple taggedmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaggedmarkTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaggedmarkSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple taggedmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TaggedmarkTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TaggedmarkSlice, error) {
	var err error
	m := make(models.TaggedmarkSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Taggedmark has methods that act as mods for the TaggedmarkTemplate
var TaggedmarkMods taggedmarkMods

type taggedmarkMods struct{}

func (m taggedmarkMods) RandomizeAllColumns(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModSlice{
		TaggedmarkMods.RandomID(f),
		TaggedmarkMods.RandomCreateTime(f),
		TaggedmarkMods.RandomUpdateTime(f),
		TaggedmarkMods.RandomURL(f),
	}
}

// Set the model columns to this value
func (m taggedmarkMods) ID(val int64) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m taggedmarkMods) IDFunc(f func() int64) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m taggedmarkMods) UnsetID() TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkMods) RandomID(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m taggedmarkMods) ensureID(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m taggedmarkMods) CreateTime(val string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.CreateTime = func() string { return val }
	})
}

// Set the Column from the function
func (m taggedmarkMods) CreateTimeFunc(f func() string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.CreateTime = f
	})
}

// Clear any values for the column
func (m taggedmarkMods) UnsetCreateTime() TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.CreateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkMods) RandomCreateTime(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.CreateTime = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkMods) ensureCreateTime(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		if o.CreateTime != nil {
			return
		}

		o.CreateTime = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m taggedmarkMods) UpdateTime(val string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.UpdateTime = func() string { return val }
	})
}

// Set the Column from the function
func (m taggedmarkMods) UpdateTimeFunc(f func() string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.UpdateTime = f
	})
}

// Clear any values for the column
func (m taggedmarkMods) UnsetUpdateTime() TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.UpdateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkMods) RandomUpdateTime(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkMods) ensureUpdateTime(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		if o.UpdateTime != nil {
			return
		}

		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m taggedmarkMods) URL(val string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.URL = func() string { return val }
	})
}

// Set the Column from the function
func (m taggedmarkMods) URLFunc(f func() string) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.URL = f
	})
}

// Clear any values for the column
func (m taggedmarkMods) UnsetURL() TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.URL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkMods) RandomURL(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.URL = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkMods) ensureURL(f *faker.Faker) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		if o.URL != nil {
			return
		}

		o.URL = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkMods) WithTaggedmarkTags(number int, related *TaggedmarkTagTemplate) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.r.TaggedmarkTags = []*taggedmarkTaggedmarkTagsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m taggedmarkMods) WithNewTaggedmarkTags(number int, mods ...TaggedmarkTagMod) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {

		related := o.f.NewTaggedmarkTag(mods...)
		m.WithTaggedmarkTags(number, related).Apply(o)
	})
}

func (m taggedmarkMods) AddTaggedmarkTags(number int, related *TaggedmarkTagTemplate) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.r.TaggedmarkTags = append(o.r.TaggedmarkTags, &taggedmarkTaggedmarkTagsR{
			number: number,
			o:      related,
		})
	})
}

func (m taggedmarkMods) AddNewTaggedmarkTags(number int, mods ...TaggedmarkTagMod) TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {

		related := o.f.NewTaggedmarkTag(mods...)
		m.AddTaggedmarkTags(number, related).Apply(o)
	})
}

func (m taggedmarkMods) WithoutTaggedmarkTags() TaggedmarkMod {
	return TaggedmarkModFunc(func(o *TaggedmarkTemplate) {
		o.r.TaggedmarkTags = nil
	})
}
