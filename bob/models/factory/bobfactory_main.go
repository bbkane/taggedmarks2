// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"strings"

	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "go.bbkane.com/taggedmarks2/bob/models"
)

type factory struct {
	baseMigrationMods     MigrationModSlice
	baseTagMods           TagModSlice
	baseTaggedmarkMods    TaggedmarkModSlice
	baseTaggedmarkTagMods TaggedmarkTagModSlice
}

func New() *factory {
	return &factory{}
}

func (f *factory) NewMigration(mods ...MigrationMod) *MigrationTemplate {
	o := &MigrationTemplate{f: f}

	if f != nil {
		f.baseMigrationMods.Apply(o)
	}

	MigrationModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewTag(mods ...TagMod) *TagTemplate {
	o := &TagTemplate{f: f}

	if f != nil {
		f.baseTagMods.Apply(o)
	}

	TagModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewTaggedmark(mods ...TaggedmarkMod) *TaggedmarkTemplate {
	o := &TaggedmarkTemplate{f: f}

	if f != nil {
		f.baseTaggedmarkMods.Apply(o)
	}

	TaggedmarkModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewTaggedmarkTag(mods ...TaggedmarkTagMod) *TaggedmarkTagTemplate {
	o := &TaggedmarkTagTemplate{f: f}

	if f != nil {
		f.baseTaggedmarkTagMods.Apply(o)
	}

	TaggedmarkTagModSlice(mods).Apply(o)

	return o
}

func (f *factory) ClearBaseMigrationMods() {
	f.baseMigrationMods = nil
}

func (f *factory) AddBaseMigrationMod(mods ...MigrationMod) {
	f.baseMigrationMods = append(f.baseMigrationMods, mods...)
}

func (f *factory) ClearBaseTagMods() {
	f.baseTagMods = nil
}

func (f *factory) AddBaseTagMod(mods ...TagMod) {
	f.baseTagMods = append(f.baseTagMods, mods...)
}

func (f *factory) ClearBaseTaggedmarkMods() {
	f.baseTaggedmarkMods = nil
}

func (f *factory) AddBaseTaggedmarkMod(mods ...TaggedmarkMod) {
	f.baseTaggedmarkMods = append(f.baseTaggedmarkMods, mods...)
}

func (f *factory) ClearBaseTaggedmarkTagMods() {
	f.baseTaggedmarkTagMods = nil
}

func (f *factory) AddBaseTaggedmarkTagMod(mods ...TaggedmarkTagMod) {
	f.baseTaggedmarkTagMods = append(f.baseTaggedmarkTagMods, mods...)
}

type contextKey string

var (
	migrationCtx     = newContextual[*models.Migration]("migration")
	tagCtx           = newContextual[*models.Tag]("tag")
	taggedmarkCtx    = newContextual[*models.Taggedmark]("taggedmark")
	taggedmarkTagCtx = newContextual[*models.TaggedmarkTag]("taggedmarkTag")
)

type contextual[V any] struct {
	key contextKey
}

// This could be weird because of type inference not handling `K` due to `V` having to be manual.
func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}

var defaultFaker = faker.New()

// random returns a random value for the given type, using the faker
// * If the given faker is nil, the default faker is used
// * The zero value is returned if the type cannot be handled
func random[T any](f *faker.Faker) T {
	if f == nil {
		f = &defaultFaker
	}

	var val T
	switch any(val).(type) {
	default:
		return val
	case string:
		return any(string(strings.Join(f.Lorem().Words(5), " "))).(T)

	case bool:
		return any(bool(f.BoolWithChance(50))).(T)

	case int:
		return any(int(f.Int())).(T)

	case int64:
		return val

	}
}

// randomNull is like [Random], but for null types
func randomNull[T any](f *faker.Faker) null.Val[T] {
	return null.From(random[T](f))
}
