// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	models "go.bbkane.com/taggedmarks2/bob/models"
)

type TaggedmarkTagMod interface {
	Apply(*TaggedmarkTagTemplate)
}

type TaggedmarkTagModFunc func(*TaggedmarkTagTemplate)

func (f TaggedmarkTagModFunc) Apply(n *TaggedmarkTagTemplate) {
	f(n)
}

type TaggedmarkTagModSlice []TaggedmarkTagMod

func (mods TaggedmarkTagModSlice) Apply(n *TaggedmarkTagTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TaggedmarkTagTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaggedmarkTagTemplate struct {
	TagID        func() int64
	TaggedmarkID func() int64
	UpdateTime   func() string
	r            taggedmarkTagR
	f            *factory
}

type taggedmarkTagR struct {
	Taggedmark *taggedmarkTagTaggedmarkR
	Tag        *taggedmarkTagTagR
}

type taggedmarkTagTaggedmarkR struct {
	o *TaggedmarkTemplate
}
type taggedmarkTagTagR struct {
	o *TagTemplate
}

// Apply mods to the TaggedmarkTagTemplate
func (o *TaggedmarkTagTemplate) Apply(mods ...TaggedmarkTagMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.TaggedmarkTag
// this does nothing with the relationship templates
func (o TaggedmarkTagTemplate) toModel() *models.TaggedmarkTag {
	m := &models.TaggedmarkTag{}

	if o.TagID != nil {
		m.TagID = o.TagID()
	}
	if o.TaggedmarkID != nil {
		m.TaggedmarkID = o.TaggedmarkID()
	}
	if o.UpdateTime != nil {
		m.UpdateTime = o.UpdateTime()
	}

	return m
}

// toModels returns an models.TaggedmarkTagSlice
// this does nothing with the relationship templates
func (o TaggedmarkTagTemplate) toModels(number int) models.TaggedmarkTagSlice {
	m := make(models.TaggedmarkTagSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.TaggedmarkTag
// according to the relationships in the template. Nothing is inserted into the db
func (t TaggedmarkTagTemplate) setModelRels(o *models.TaggedmarkTag) {
	if t.r.Taggedmark != nil {
		rel := t.r.Taggedmark.o.toModel()
		rel.R.TaggedmarkTags = append(rel.R.TaggedmarkTags, o)
		o.TaggedmarkID = rel.ID
		o.R.Taggedmark = rel
	}

	if t.r.Tag != nil {
		rel := t.r.Tag.o.toModel()
		rel.R.TaggedmarkTag = o
		o.TagID = rel.ID
		o.R.Tag = rel
	}

}

// BuildSetter returns an *models.TaggedmarkTagSetter
// this does nothing with the relationship templates
func (o TaggedmarkTagTemplate) BuildSetter() *models.TaggedmarkTagSetter {
	m := &models.TaggedmarkTagSetter{}

	if o.TagID != nil {
		m.TagID = omit.From(o.TagID())
	}
	if o.TaggedmarkID != nil {
		m.TaggedmarkID = omit.From(o.TaggedmarkID())
	}
	if o.UpdateTime != nil {
		m.UpdateTime = omit.From(o.UpdateTime())
	}

	return m
}

// BuildManySetter returns an []*models.TaggedmarkTagSetter
// this does nothing with the relationship templates
func (o TaggedmarkTagTemplate) BuildManySetter(number int) []*models.TaggedmarkTagSetter {
	m := make([]*models.TaggedmarkTagSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.TaggedmarkTag
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaggedmarkTagTemplate.Create
func (o TaggedmarkTagTemplate) Build() *models.TaggedmarkTag {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaggedmarkTagSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaggedmarkTagTemplate.CreateMany
func (o TaggedmarkTagTemplate) BuildMany(number int) models.TaggedmarkTagSlice {
	m := make(models.TaggedmarkTagSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTaggedmarkTag(m *models.TaggedmarkTagSetter) {
	if m.TagID.IsUnset() {
		m.TagID = omit.From(random[int64](nil))
	}
	if m.TaggedmarkID.IsUnset() {
		m.TaggedmarkID = omit.From(random[int64](nil))
	}
	if m.UpdateTime.IsUnset() {
		m.UpdateTime = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.TaggedmarkTag
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaggedmarkTagTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.TaggedmarkTag) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a taggedmarkTag and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaggedmarkTagTemplate) Create(ctx context.Context, exec bob.Executor) (*models.TaggedmarkTag, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a taggedmarkTag and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TaggedmarkTagTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.TaggedmarkTag, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTaggedmarkTag(opt)

	var rel0 *models.Taggedmark
	if o.r.Taggedmark == nil {
		var ok bool
		rel0, ok = taggedmarkCtx.Value(ctx)
		if !ok {
			TaggedmarkTagMods.WithNewTaggedmark().Apply(o)
		}
	}
	if o.r.Taggedmark != nil {
		ctx, rel0, err = o.r.Taggedmark.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.TaggedmarkID = omit.From(rel0.ID)

	var rel1 *models.Tag
	if o.r.Tag == nil {
		var ok bool
		rel1, ok = tagCtx.Value(ctx)
		if !ok {
			TaggedmarkTagMods.WithNewTag().Apply(o)
		}
	}
	if o.r.Tag != nil {
		ctx, rel1, err = o.r.Tag.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.TagID = omit.From(rel1.ID)

	m, err := models.TaggedmarkTagsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = taggedmarkTagCtx.WithValue(ctx, m)

	m.R.Taggedmark = rel0
	m.R.Tag = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple taggedmarkTags and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaggedmarkTagTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaggedmarkTagSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple taggedmarkTags and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TaggedmarkTagTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TaggedmarkTagSlice, error) {
	var err error
	m := make(models.TaggedmarkTagSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// TaggedmarkTag has methods that act as mods for the TaggedmarkTagTemplate
var TaggedmarkTagMods taggedmarkTagMods

type taggedmarkTagMods struct{}

func (m taggedmarkTagMods) RandomizeAllColumns(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModSlice{
		TaggedmarkTagMods.RandomTagID(f),
		TaggedmarkTagMods.RandomTaggedmarkID(f),
		TaggedmarkTagMods.RandomUpdateTime(f),
	}
}

// Set the model columns to this value
func (m taggedmarkTagMods) TagID(val int64) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TagID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m taggedmarkTagMods) TagIDFunc(f func() int64) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TagID = f
	})
}

// Clear any values for the column
func (m taggedmarkTagMods) UnsetTagID() TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TagID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkTagMods) RandomTagID(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TagID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m taggedmarkTagMods) ensureTagID(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		if o.TagID != nil {
			return
		}

		o.TagID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m taggedmarkTagMods) TaggedmarkID(val int64) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TaggedmarkID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m taggedmarkTagMods) TaggedmarkIDFunc(f func() int64) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TaggedmarkID = f
	})
}

// Clear any values for the column
func (m taggedmarkTagMods) UnsetTaggedmarkID() TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TaggedmarkID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkTagMods) RandomTaggedmarkID(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.TaggedmarkID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m taggedmarkTagMods) ensureTaggedmarkID(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		if o.TaggedmarkID != nil {
			return
		}

		o.TaggedmarkID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m taggedmarkTagMods) UpdateTime(val string) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.UpdateTime = func() string { return val }
	})
}

// Set the Column from the function
func (m taggedmarkTagMods) UpdateTimeFunc(f func() string) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.UpdateTime = f
	})
}

// Clear any values for the column
func (m taggedmarkTagMods) UnsetUpdateTime() TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.UpdateTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taggedmarkTagMods) RandomUpdateTime(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkTagMods) ensureUpdateTime(f *faker.Faker) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		if o.UpdateTime != nil {
			return
		}

		o.UpdateTime = func() string {
			return random[string](f)
		}
	})
}

func (m taggedmarkTagMods) WithTaggedmark(rel *TaggedmarkTemplate) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.r.Taggedmark = &taggedmarkTagTaggedmarkR{
			o: rel,
		}
	})
}

func (m taggedmarkTagMods) WithNewTaggedmark(mods ...TaggedmarkMod) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {

		related := o.f.NewTaggedmark(mods...)

		m.WithTaggedmark(related).Apply(o)
	})
}

func (m taggedmarkTagMods) WithoutTaggedmark() TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.r.Taggedmark = nil
	})
}

func (m taggedmarkTagMods) WithTag(rel *TagTemplate) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.r.Tag = &taggedmarkTagTagR{
			o: rel,
		}
	})
}

func (m taggedmarkTagMods) WithNewTag(mods ...TagMod) TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {

		related := o.f.NewTag(mods...)

		m.WithTag(related).Apply(o)
	})
}

func (m taggedmarkTagMods) WithoutTag() TaggedmarkTagMod {
	return TaggedmarkTagModFunc(func(o *TaggedmarkTagTemplate) {
		o.r.Tag = nil
	})
}
