// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
)

// Taggedmark is an object representing the database table.
type Taggedmark struct {
	ID         int64  `db:"id,pk,generated" json:"id" toml:"id" yaml:"id"`
	CreateTime string `db:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime string `db:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`
	URL        string `db:"url" json:"url" toml:"url" yaml:"url"`

	R taggedmarkR `db:"-" json:"-" toml:"-" yaml:"-"`
}

// TaggedmarkSlice is an alias for a slice of pointers to Taggedmark.
// This should almost always be used instead of []Taggedmark.
type TaggedmarkSlice []*Taggedmark

// TaggedmarksTable contains methods to work with the taggedmark table
var TaggedmarksTable = sqlite.NewTablex[*Taggedmark, TaggedmarkSlice, *TaggedmarkSetter]("", "taggedmark")

// TaggedmarksQuery is a query on the taggedmark table
type TaggedmarksQuery = *sqlite.TableQuery[*Taggedmark, TaggedmarkSlice, *TaggedmarkSetter]

// TaggedmarksStmt is a prepared statment on taggedmark
type TaggedmarksStmt = bob.QueryStmt[*Taggedmark, TaggedmarkSlice]

// taggedmarkR is where relationships are stored.
type taggedmarkR struct {
	TaggedmarkTags TaggedmarkTagSlice `db:"TaggedmarkTags" json:"TaggedmarkTags" toml:"TaggedmarkTags" yaml:"TaggedmarkTags"`
}

// TaggedmarkSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TaggedmarkSetter struct {
	CreateTime omit.Val[string] `db:"create_time"`
	UpdateTime omit.Val[string] `db:"update_time"`
	URL        omit.Val[string] `db:"url"`
}

type taggedmarkColumnNames struct {
	ID         string
	CreateTime string
	UpdateTime string
	URL        string
}

var TaggedmarkColumns = struct {
	ID         sqlite.Expression
	CreateTime sqlite.Expression
	UpdateTime sqlite.Expression
	URL        sqlite.Expression
}{
	ID:         sqlite.Quote("taggedmark", "id"),
	CreateTime: sqlite.Quote("taggedmark", "create_time"),
	UpdateTime: sqlite.Quote("taggedmark", "update_time"),
	URL:        sqlite.Quote("taggedmark", "url"),
}

type taggedmarkWhere[Q sqlite.Filterable] struct {
	ID         sqlite.WhereMod[Q, int64]
	CreateTime sqlite.WhereMod[Q, string]
	UpdateTime sqlite.WhereMod[Q, string]
	URL        sqlite.WhereMod[Q, string]
}

func TaggedmarkWhere[Q sqlite.Filterable]() taggedmarkWhere[Q] {
	return taggedmarkWhere[Q]{
		ID:         sqlite.Where[Q, int64](sqlite.Quote("taggedmark", "id")),
		CreateTime: sqlite.Where[Q, string](sqlite.Quote("taggedmark", "create_time")),
		UpdateTime: sqlite.Where[Q, string](sqlite.Quote("taggedmark", "update_time")),
		URL:        sqlite.Where[Q, string](sqlite.Quote("taggedmark", "url")),
	}
}

// Taggedmarks begins a query on taggedmark
func Taggedmarks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TaggedmarksQuery {
	return TaggedmarksTable.Query(ctx, exec, mods...)
}

// FindTaggedmark retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTaggedmark(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Taggedmark, error) {
	if len(cols) == 0 {
		return TaggedmarksTable.Query(
			ctx, exec,
			SelectWhere.Taggedmarks.ID.EQ(IDPK),
		).One()
	}

	return TaggedmarksTable.Query(
		ctx, exec,
		SelectWhere.Taggedmarks.ID.EQ(IDPK),
		sm.Columns(TaggedmarksTable.Columns().Only(cols...)),
	).One()
}

// TaggedmarkExists checks the presence of a single record by primary key
func TaggedmarkExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return TaggedmarksTable.Query(
		ctx, exec,
		SelectWhere.Taggedmarks.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Taggedmark
func (o *Taggedmark) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TaggedmarksTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Taggedmark record with an executor
func (o *Taggedmark) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TaggedmarksTable.Delete(ctx, exec, o)
}

// Reload refreshes the Taggedmark using the executor
func (o *Taggedmark) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TaggedmarksTable.Query(
		ctx, exec,
		SelectWhere.Taggedmarks.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TaggedmarkSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TaggedmarksTable.DeleteMany(ctx, exec, o...)
}

func (o TaggedmarkSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TaggedmarkSetter) (int64, error) {
	rowsAff, err := TaggedmarksTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TaggedmarkSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]any, len(o))
	for i, o := range o {
		IDPK[i] = o.ID
	}
	mods = append(mods, sm.Where(TaggedmarkColumns.ID.In(IDPK...)))

	o2, err := Taggedmarks(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

// TaggedmarkTags starts a query for related objects on taggedmark_tag
func (o *Taggedmark) TaggedmarkTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TaggedmarkTagsQuery {
	return TaggedmarkTags(ctx, exec, append(mods,
		sm.Where(TaggedmarkTagColumns.TaggedmarkID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os TaggedmarkSlice) TaggedmarkTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TaggedmarkTagsQuery {
	PKArgs := make([]any, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, sqlite.ArgGroup(o.ID))
	}

	return TaggedmarkTags(ctx, exec, append(mods,
		sm.Where(sqlite.Group(TaggedmarkTagColumns.TaggedmarkID).In(PKArgs...)),
	)...)
}

func (o *Taggedmark) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "TaggedmarkTags":
		rels, ok := retrieved.(TaggedmarkTagSlice)
		if !ok {
			return fmt.Errorf("taggedmark cannot load %T as %q", retrieved, name)
		}

		o.R.TaggedmarkTags = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Taggedmark = o
			}
		}
		return nil
	default:
		return fmt.Errorf("taggedmark has no relationship %q", name)
	}
}

func ThenLoadTaggedmarkTaggedmarkTags(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTaggedmarkTaggedmarkTags(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TaggedmarkTaggedmarkTags", retrieved)
		}

		return loader.LoadTaggedmarkTaggedmarkTags(ctx, exec, queryMods...)
	})
}

// LoadTaggedmarkTaggedmarkTags loads the taggedmark's TaggedmarkTags into the .R struct
func (o *Taggedmark) LoadTaggedmarkTaggedmarkTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	related, err := o.TaggedmarkTags(ctx, exec, mods...).All()
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return err
	}

	for _, rel := range related {
		rel.R.Taggedmark = o
	}

	o.R.TaggedmarkTags = related
	return nil
}

// LoadTaggedmarkTaggedmarkTags loads the taggedmark's TaggedmarkTags into the .R struct
func (os TaggedmarkSlice) LoadTaggedmarkTaggedmarkTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	taggedmarkTags, err := os.TaggedmarkTags(ctx, exec, mods...).All()
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return err
	}

	for _, o := range os {
		o.R.TaggedmarkTags = nil
	}

	for _, rel := range taggedmarkTags {
		for _, o := range os {
			if o.ID != rel.TaggedmarkID {
				continue
			}

			rel.R.Taggedmark = o

			o.R.TaggedmarkTags = append(o.R.TaggedmarkTags, rel)
		}
	}

	return nil
}

func (o *Taggedmark) InsertTaggedmarkTags(ctx context.Context, exec bob.Executor, related ...*TaggedmarkTagSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.TaggedmarkID = omit.From(o.ID)
	}

	newRels, err := TaggedmarkTagsTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.TaggedmarkTags = append(o.R.TaggedmarkTags, newRels...)

	for _, rel := range newRels {
		rel.R.Taggedmark = o
	}

	return nil
}

func (o *Taggedmark) AttachTaggedmarkTags(ctx context.Context, exec bob.Executor, related ...*TaggedmarkTag) error {

	for _, rel := range related {
		rel.TaggedmarkID = o.ID
	}

	if _, err := TaggedmarkTagsTable.UpdateMany(
		ctx, exec, &TaggedmarkTagSetter{
			TaggedmarkID: omit.From(o.ID),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.TaggedmarkTags = append(o.R.TaggedmarkTags, related...)

	for _, rel := range related {
		rel.R.Taggedmark = o
	}

	return nil
}
