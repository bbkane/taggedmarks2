// Code generated by BobGen sqlite v0.15.5. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/orm"
)

// Tag is an object representing the database table.
type Tag struct {
	ID         int64  `db:"id,pk,generated" json:"id" toml:"id" yaml:"id"`
	CreateTime string `db:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	Name       string `db:"name" json:"name" toml:"name" yaml:"name"`
	UpdateTime string `db:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R tagR `db:"-" json:"-" toml:"-" yaml:"-"`
}

// TagSlice is an alias for a slice of pointers to Tag.
// This should almost always be used instead of []Tag.
type TagSlice []*Tag

// TagsTable contains methods to work with the tag table
var TagsTable = sqlite.NewTablex[*Tag, TagSlice, *TagSetter]("", "tag")

// TagsQuery is a query on the tag table
type TagsQuery = *sqlite.TableQuery[*Tag, TagSlice, *TagSetter]

// TagsStmt is a prepared statment on tag
type TagsStmt = bob.QueryStmt[*Tag, TagSlice]

// tagR is where relationships are stored.
type tagR struct {
	TaggedmarkTag *TaggedmarkTag `db:"TaggedmarkTag" json:"TaggedmarkTag" toml:"TaggedmarkTag" yaml:"TaggedmarkTag"`
}

// TagSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TagSetter struct {
	CreateTime omit.Val[string] `db:"create_time"`
	Name       omit.Val[string] `db:"name"`
	UpdateTime omit.Val[string] `db:"update_time"`
}

type tagColumnNames struct {
	ID         string
	CreateTime string
	Name       string
	UpdateTime string
}

var TagColumns = struct {
	ID         sqlite.Expression
	CreateTime sqlite.Expression
	Name       sqlite.Expression
	UpdateTime sqlite.Expression
}{
	ID:         sqlite.Quote("tag", "id"),
	CreateTime: sqlite.Quote("tag", "create_time"),
	Name:       sqlite.Quote("tag", "name"),
	UpdateTime: sqlite.Quote("tag", "update_time"),
}

type tagWhere[Q sqlite.Filterable] struct {
	ID         sqlite.WhereMod[Q, int64]
	CreateTime sqlite.WhereMod[Q, string]
	Name       sqlite.WhereMod[Q, string]
	UpdateTime sqlite.WhereMod[Q, string]
}

func TagWhere[Q sqlite.Filterable]() tagWhere[Q] {
	return tagWhere[Q]{
		ID:         sqlite.Where[Q, int64](sqlite.Quote("tag", "id")),
		CreateTime: sqlite.Where[Q, string](sqlite.Quote("tag", "create_time")),
		Name:       sqlite.Where[Q, string](sqlite.Quote("tag", "name")),
		UpdateTime: sqlite.Where[Q, string](sqlite.Quote("tag", "update_time")),
	}
}

// Tags begins a query on tag
func Tags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	return TagsTable.Query(ctx, exec, mods...)
}

// FindTag retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTag(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Tag, error) {
	if len(cols) == 0 {
		return TagsTable.Query(
			ctx, exec,
			SelectWhere.Tags.ID.EQ(IDPK),
		).One()
	}

	return TagsTable.Query(
		ctx, exec,
		SelectWhere.Tags.ID.EQ(IDPK),
		sm.Columns(TagsTable.Columns().Only(cols...)),
	).One()
}

// TagExists checks the presence of a single record by primary key
func TagExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return TagsTable.Query(
		ctx, exec,
		SelectWhere.Tags.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Tag
func (o *Tag) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TagsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Tag record with an executor
func (o *Tag) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TagsTable.Delete(ctx, exec, o)
}

// Reload refreshes the Tag using the executor
func (o *Tag) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TagsTable.Query(
		ctx, exec,
		SelectWhere.Tags.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TagSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TagsTable.DeleteMany(ctx, exec, o...)
}

func (o TagSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TagSetter) (int64, error) {
	rowsAff, err := TagsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TagSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]any, len(o))
	for i, o := range o {
		IDPK[i] = o.ID
	}
	mods = append(mods, sm.Where(TagColumns.ID.In(IDPK...)))

	o2, err := Tags(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

// TaggedmarkTag starts a query for related objects on taggedmark_tag
func (o *Tag) TaggedmarkTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TaggedmarkTagsQuery {
	return TaggedmarkTags(ctx, exec, append(mods,
		sm.Where(TaggedmarkTagColumns.TagID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os TagSlice) TaggedmarkTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TaggedmarkTagsQuery {
	PKArgs := make([]any, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, sqlite.ArgGroup(o.ID))
	}

	return TaggedmarkTags(ctx, exec, append(mods,
		sm.Where(sqlite.Group(TaggedmarkTagColumns.TagID).In(PKArgs...)),
	)...)
}

func (o *Tag) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "TaggedmarkTag":
		rel, ok := retrieved.(*TaggedmarkTag)
		if !ok {
			return fmt.Errorf("tag cannot load %T as %q", retrieved, name)
		}

		o.R.TaggedmarkTag = rel

		if rel != nil {
			rel.R.Tag = o
		}
		return nil
	default:
		return fmt.Errorf("tag has no relationship %q", name)
	}
}

func PreloadTagTaggedmarkTag(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*TaggedmarkTag, TaggedmarkTagSlice](orm.Relationship{
		Name: "TaggedmarkTag",
		Sides: []orm.RelSide{
			{
				From:   "tag",
				To:     TableNames.TaggedmarkTags,
				ToExpr: TaggedmarkTagsTable.Name,
				FromColumns: []string{
					ColumnNames.Tags.ID,
				},
				ToColumns: []string{
					ColumnNames.TaggedmarkTags.TagID,
				},
			},
		},
	}, TaggedmarkTagsTable.Columns().Names(), opts...)
}

func ThenLoadTagTaggedmarkTag(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTagTaggedmarkTag(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TagTaggedmarkTag", retrieved)
		}

		return loader.LoadTagTaggedmarkTag(ctx, exec, queryMods...)
	})
}

// LoadTagTaggedmarkTag loads the tag's TaggedmarkTag into the .R struct
func (o *Tag) LoadTagTaggedmarkTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	related, err := o.TaggedmarkTag(ctx, exec, mods...).One()
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return err
	}

	related.R.Tag = o

	o.R.TaggedmarkTag = related
	return nil
}

// LoadTagTaggedmarkTag loads the tag's TaggedmarkTag into the .R struct
func (os TagSlice) LoadTagTaggedmarkTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	taggedmarkTags, err := os.TaggedmarkTag(ctx, exec, mods...).All()
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return err
	}

	for _, rel := range taggedmarkTags {
		for _, o := range os {
			if o.ID != rel.TagID {
				continue
			}

			rel.R.Tag = o

			o.R.TaggedmarkTag = rel
			break
		}
	}

	return nil
}

func (o *Tag) InsertTaggedmarkTag(ctx context.Context, exec bob.Executor, related *TaggedmarkTagSetter) error {
	rel := related

	rel.TagID = omit.From(o.ID)

	inserted, err := TaggedmarkTagsTable.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.TaggedmarkTag = inserted

	o.R.TaggedmarkTag.R.Tag = o

	return nil
}

func (o *Tag) AttachTaggedmarkTag(ctx context.Context, exec bob.Executor, rel *TaggedmarkTag) error {
	var err error

	rel.TagID = o.ID

	_, err = rel.Update(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.TaggedmarkTag = rel

	rel.R.Tag = o

	return nil
}
